var flexo = require("flexo");

// TODO parser, cf. http://javascript.crockford.com/tdop/tdop.html
// TODO fix multiline input
exports.parser =
{
  init: function(line)
  {
    this.line = line || 0;
    this.open = [];
    this.list = 0;
    this.comment = false;
    this.tilda = false;
    this.escaped = false;
    this.bars = false;
    this.input = "";
    this.tokens = [];
    this.i = 0;
    return this;
  },

  // Get the next token or add to an already created token
  next_token: function()
  {
    this.tilda = false;
    this.comment = false;
    this.escaped = false;
    var l = this.input.length;
    var token;  // current token (may continue from leftover token)
    var begin;  // beginning of a line (start of input or following a newline)

    if (this.leftover) {
      // Continue reading token after line break (after a ~ or escaped newline)
      token = this.leftover;
      delete this.leftover;
    } else {
      // Look for a new token
      for (; this.i < l && /\s/.test(this.input[this.i]); ++this.i) {
        if (this.input[this.i] === "\n") ++this.line;
      }
      if (this.i >= l) return;
      var c = this.input[this.i++];
      var token = { line: this.line };
      if ((this.i === 1 || this.input[this.i - 2] === "\n") &&
          c === "#" && this.input[this.i] === "!") {
        this.comment = true;
        ++this.i;
      } else if (c === ";") {
        this.comment = true;
      } else if (c === "~" && this.input[this.i] === "\n") {
        ++this.i;
        ++this.line;
        this.tilda = true;
        return;
      } else if (c === "\\" && this.i < l) {
        this.escaped = true;
        token.value = "";
        token.type = "name";
      } else if (c === "|") {
        this.bars = true;
        token.surface = c;
        token.value = "";
        token.type = this.list > 0 ? "word" : "name";
        if (this.list > 0) {
          token.number = true;
          token.dotted = false;
        }
      } else if (c === "[") {
        this.open.push(c);
        ++this.list;
        token.value = token.type = token.surface = c;
        return token;
      } else if (c === "]") {
        var open = this.open.pop();
        if (open === "[") {
          --this.list;
          token.value = token.type = token.surface = c;
          return token;
        } else {
          throw "Unmatched \"]\"";
        }
      } else if (this.list === 0) {
        if (c === "(" || c === "{") {
          this.open.push(c);
          token.value = token.type = token.surface = c;
          return token;
        } else if (c === ")" || c === "}") {
          var open = this.open.pop();
          if ((open === "(" && c === ")") || (open === "{" && c === "}")) {
            token.value = token.type = token.surface = c;
            return token;
          } else {
            throw "Unmatched \"{0}\"".fmt(c);
          }
        } else if (c === "\"") {
          token.value = "";
          token.surface = c;
          token.type = "word";
          token.number = true;
          token.dotted = false;
        } else if (c === "-") {
          token.value = token.surface = c;
          token.number = true;
          token.dotted = false;
          token.type = "name";
        } else if (c === "<") {
          if (this.input[this.i] === "=" || this.input[this.i] === ">") {
            c += this.input[this.i++];
          }
          token.value = token.surface = c;
          token.type = "infix";
          return token;
        } else if (c === ">") {
          if (this.input[this.i] === "=") c += this.input[this.i++];
          token.value = token.surface = c;
          token.type = "infix";
          return token;
        } else if (c === "+" || c === "*" || c === "/" || c === "=") {
          // note that "-" is handled as a number at the moment
          token.value = token.surface = c;
          token.type = "infix";
          return token;
        } else {
          token.value = c.toUpperCase();
          token.surface = c;
          token.number = true;
          token.dotted = c === ".";
          token.type = "name";
        }
      } else {
        token.value = c;
        token.surface = c;
        token.type = "word";
      }
    }

    function add_c()
    {
      var ok = true;
      if (token.number) {
        if (c === ".") {
          if (token.dotted) {
            delete token.number;
            delete token.dotted;
            ok = token.surface[0] !== "-";
          } else {
            token.dotted = true;
          }
        } else if (!/\d/.test(c)) {
          delete token.number;
          delete token.dotted;
          ok = token.surface[0] !== "-";
        }
      }
      if (!ok) {
        if (token.surface.length > 1) {
          this.leftover = { type: token.type, surface: token.surface.substr(1),
            value: token.value.substr(1), line: token.line };
        }
        token.value = token.surface = "-";
        token.type = "infix";
        return false;
      }
      token.surface += c;
      token.value += token.type === "word" ? c : c.toUpperCase();
      return true;
    }

    function check_number()
    {
      if (token.number) {
        delete token.number;
        delete token.dotted;
        var v = parseFloat(token.value);
        if (!isNaN(v)) {
          token.value = v;
          token.type = "number";
        }
      }
    }

    // Keep adding to the current token (name, word, comment)
    while (this.i < l) {
      c = this.input[this.i];
      if (this.escaped) {
        if (!add_c.call(this)) return token;
        if (c === "\n" && this.i === l - 1) {
          ++this.line;
          this.leftover = token;
          return;
        } else {
          this.escaped = false;
        }
      } else if (this.bars) {
        if (c === "|") {
          token.surface += c;
          this.bars = false;
        } else if (c === "\\" && this.i < l - 1) {
          token.surface += c;
          this.escaped = true;
        } else {
          if (!add_c.call(this)) return token;
          if (c === "\n" && this.i === l - 1) {
            ++this.line;
            this.leftover = token;
            return;
          }
        }
      } else {
        if (c === "~" && this.input[this.i + 1] === "\n") {
          ++this.i;
          ++this.line;
          this.tilda = true;
          this.leftover = token;
          return;
        }
        if (!this.comment) {
          if (c === ";") {
            this.comment = true;
            this.leftover = token;
          } else if (c === "\\" && this.i < l - 1) {
            this.escaped = true;
            token.surface += c;
          } else if (c === "|") {
            this.bars = true;
            this.surface += c;
          } else if (this.list === 0 && (/\s/.test(c) || c === "[" ||
                c === "]" || c === "(" || c === ")" || c === "{" || c === "}" ||
                c === "+" || c === "-" || c === "*" || c === "/" || c === "=" ||
                c === "<" || c === ">") ||
              (this.list > 0 && (/\s/.test(c) || c === "[" || c === "]"))) {
            check_number();
            return token;
          } else {
            if (!add_c.call(this)) return token;
          }
        }
      }
      ++this.i;
    }
    if (token.type && !this.tilda && !this.escaped && !this.bars) {
      delete this.leftover;
      check_number();
      return token;
    }
  },

  // Tokenize input and call a continuation with either a list of tokens or a
  // prompt for more tokens.
  // TODO handle END on its own line here
  tokenize: function(input, f)
  {
    this.i = 0;
    this.input = input;
    var token;
    do {
      token = this.next_token();
      if (token) this.tokens.push(token);
    } while (token);
    if (this.open.length === 0 && !this.leftover) {
      var tokens = this.tokens.slice(0);
      this.tokens = [];
      f("?", tokens);
    } else {
      f(this.tilda ? "~" : this.escaped ? "\\" : this.bars ? "|" :
          this.open[this.open.length - 1] || "?");
    }
  },


  // Parse
  parse: function(input, f)
  {
    var symtab = {};

    var ursymbol =
    {
      nud: function() { error(this, "Undefined."); },
      led: function(left) { error(this, "Missing operator."); }
    };

    symbol("]");
    symbol(")");
    symbol("}");
    symbol("(end)");
    symbol("(name)");

    function symbol(id, bp)
    {
      var s = symtab[id];
      bp = bp || 0;
      if (s) {
        if (bp >= s.lbp) s.lbp = bp;
      } else {
        s = Object.create(ursymbol);
        s.id = s.value = id;
        s.lbp = bp;
        symtab[id] = s;
      }
      return s;
    }

    var token_nr = 0;
    var token;

    function advance(id)
    {
      if (id && token.id !== id) error(token, "Expected {0}.".fmt(id));
      if (token_nr >= tokens.length) {
        token = symtab["(end)"];
        return;
      }
      var t = tokens[token_nr];
      ++token_nr;
      var v = t.value;
      var a = t.type;
      var o;
      if (a === "name") {
        o = scope.find(v);
      } else if (a === "operator") {  // should be "infix"
        o = symtab[v];
        if (!o) error(t, "Unknown operator.");
      } else if (a === "string" || a === "number") {  // should be word
        a = "literal";
        o = symtab["(literal)"];
      }
    }

    this.tokenize(input, function(p, tokens) {
        if (tokens) {
          f(p, tokens);
        } else {
          f(p);
        }
      });
  }
};
