; COMBINE thing1 thing2
;   if thing2 is a word, outputs WORD thing1 thing2.  If thing2 is a list,
;   outputs FPUT thing1 thing2.
TO COMBINE :thing1 :thing2
  IFELSE WORD? :thing1 [WORD :thing1 :thing2] [FPUT :thing1 :thing2]
END

; IGNORE value
;   command.  Does nothing.  Used when an expression is evaluated for
;   a side effect and its actual value is unimportant.
TO IGNORE :value
END

; LOCALMAKE varname value
;   command.  Makes the named variable local, like LOCAL, and
;   assigns it the given value, like MAKE.
.MACRO LOCALMAKE :varname :value
  OUTPUT (list "local (word "" :varname) "apply ""make (list :varname :value))
END

; NAME value varname
;   command.  Same as MAKE but with the inputs in reverse order.
TO NAME :value :varname
  MAKE :varname :value
END

; PICK list
;   outputs a randomly chosen member of the input list.
TO PICK :list
  ITEM (RANDOM 1 COUNT :list) :list
END

; QUOTED thing
;   outputs its input, if a list; outputs its input with a quotation
;   mark prepended, if a word.
TO QUOTED :thing
  OUTPUT IFELSE WORD? :thing [OUTPUT WORD "" :thing] [OUTPUT :thing]
END

; REVERSE list
;   outputs a list whose members are the members of the input list, in
;   reverse order.
TO REVERSE :list
  IFELSE EMPTY? :list
    [OUTPUT :list]
    [FPUT LAST :list REVERSE BUTLAST :list]
END


; Aliases
COPYDEF "BF "BUTFIRST
COPYDEF "BL "BUTLAST
COPYDEF "EMPTY? "EMPTYP
COPYDEF "EQUAL? "EQUALP
COPYDEF "GREATER? "GREATERP
COPYDEF "GREATEREQUAL? "GREATEREQUALP
COPYDEF "IFF "IFFALSE
COPYDEF "IFT "IFTRUE
COPYDEF "LESS? "LESSP
COPYDEF "LESSEQUAL? "LESSEQUALP
COPYDEF "LIST? "LISTP
COPYDEF "MEMBER? "MEMBERP
COPYDEF "NOTEQUAL? "NOTEQUALP
COPYDEF "OP "OUTPUT
;COPYDEF "PO "PRINTOUT
COPYDEF "PR "PRINT
COPYDEF "RL "READLIST
COPYDEF "SE "SENTENCE
COPYDEF "WORD? "WORDP


; The welcome message shows up when the library is loaded
PR [Welcome to Logo]
